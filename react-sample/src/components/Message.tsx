//無名関数でコンポーネントを定義、Text変数に代入
//Textコンポーネントは親から'content'というデータを受け取る。
const Text = ( props:{ content : string }) => {

    //引数で受け取ったpropsからcontentという値を取り出す。
    const { content } = props

    //propsで渡されたデータを表示させる。
    //そのまま文字列で表示させるよりも、外部から受け取った値を表示できるように記述する方が再利用性が高くなる。
    return <p className="text">{ content }</p>
}

//同様に定義したコンポーネントをMessageという変数に代入する。
const Message = ( props:{} ) => {
    const content1 = 'こいつだけじゃなくて'
    const content2 = 'こっちも表示される。'

    //contentというキーでコンポーネントへデータを渡す。
    //Textでは<p>タグが1つだけだが、ここで違う変数を渡すとそれぞれ（計2つ）表示される。
    return (
        <div>
            <Text content = { content1 } />
            <Text content = { content2 } />
        </div>
    )
}

//Messageコンポーネントをデフォルトエクスポートする。
export default Message


//上記のコードは、Messageが親、Textが子にあたる。
//propsは親から子へデータを一方通行で渡すものであり、propsの中身を子から書き換えることはできない。
//こうすることで、データが様々な場所で変化することがなく、デバックが容易になる。

//もし、コンポーネント中で表示内容を変更したい場合は、親からコールバック関数を渡してイベントやデータを通知できる。
//また、フックを使用することで、コンポーネントの中に内部状態を保つことができる。


//Reactにおいて
//コンポーネントは見た目と振る舞いをセットにしたUIの部品の総称である。
//React要素や他のコンポーネントを組み合わせたものを返す。

//コンポーネントは関数やクラスを用いて実装するが、関数コンポーネントを使用するのが主流
//コンポーネントの名前は大文字から始まるパスカルケースで命名する必要があり
//上記のコードで言えば、text や messageでは、コンポーネントとして認識されない。